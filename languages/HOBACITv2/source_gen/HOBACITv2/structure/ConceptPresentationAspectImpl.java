package HOBACITv2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_ActionType;
  private ConceptPresentation props_AllOf;
  private ConceptPresentation props_AnyOf;
  private ConceptPresentation props_Apply;
  private ConceptPresentation props_AttributeAssignment;
  private ConceptPresentation props_AttributeDesignator;
  private ConceptPresentation props_AttributeValue;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_EnvironmentType;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_Match;
  private ConceptPresentation props_Policy;
  private ConceptPresentation props_PolicySet;
  private ConceptPresentation props_Resource;
  private ConceptPresentation props_ResourceType;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_Subject;
  private ConceptPresentation props_SubjectType;
  private ConceptPresentation props_Target;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.ActionType:
        if (props_ActionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ActionType = cpb.create();
        }
        return props_ActionType;
      case LanguageConceptSwitch.AllOf:
        if (props_AllOf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AllOf = cpb.create();
        }
        return props_AllOf;
      case LanguageConceptSwitch.AnyOf:
        if (props_AnyOf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AnyOf = cpb.create();
        }
        return props_AnyOf;
      case LanguageConceptSwitch.Apply:
        if (props_Apply == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Apply = cpb.create();
        }
        return props_Apply;
      case LanguageConceptSwitch.AttributeAssignment:
        if (props_AttributeAssignment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AttributeAssignment");
          props_AttributeAssignment = cpb.create();
        }
        return props_AttributeAssignment;
      case LanguageConceptSwitch.AttributeDesignator:
        if (props_AttributeDesignator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeDesignator = cpb.create();
        }
        return props_AttributeDesignator;
      case LanguageConceptSwitch.AttributeValue:
        if (props_AttributeValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeValue = cpb.create();
        }
        return props_AttributeValue;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.EnvironmentType:
        if (props_EnvironmentType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnvironmentType = cpb.create();
        }
        return props_EnvironmentType;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.Match:
        if (props_Match == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Match = cpb.create();
        }
        return props_Match;
      case LanguageConceptSwitch.Policy:
        if (props_Policy == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Policy = cpb.create();
        }
        return props_Policy;
      case LanguageConceptSwitch.PolicySet:
        if (props_PolicySet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PolicySet = cpb.create();
        }
        return props_PolicySet;
      case LanguageConceptSwitch.Resource:
        if (props_Resource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Resource = cpb.create();
        }
        return props_Resource;
      case LanguageConceptSwitch.ResourceType:
        if (props_ResourceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ResourceType = cpb.create();
        }
        return props_ResourceType;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.Subject:
        if (props_Subject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Subject = cpb.create();
        }
        return props_Subject;
      case LanguageConceptSwitch.SubjectType:
        if (props_SubjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SubjectType = cpb.create();
        }
        return props_SubjectType;
      case LanguageConceptSwitch.Target:
        if (props_Target == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Target = cpb.create();
        }
        return props_Target;
    }
    return null;
  }
}
